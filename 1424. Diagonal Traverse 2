Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.

 

Example 1:


Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]
Example 2:


Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i].length <= 105
1 <= sum(nums[i].length) <= 105
1 <= nums[i][j] <= 105



//////////////////////////////////////// CODE ////////////////////////////////////
class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& nums) {
        int row=nums.size();
        vector<int>ans;
        map<int, vector<int>>mp;
        for(int i=row-1;i>=0;i--){
           int col=nums[i].size();
           for(int j=0;j<col;j++)
           mp[i+j].push_back(nums[i][j]); 
        }
        for(auto &it:mp)
        {
            for(auto &val:it.second)
            ans.push_back(val);
        }
        return ans;
    }
};

//Time complexity: O(m*n)
//Space complexity: O(m*n)
